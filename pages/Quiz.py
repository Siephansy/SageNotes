import streamlit as st
import time
import random

# Dados do quiz
quiz_data = [
    {
        "pergunta": "Qual √© a capital da Fran√ßa?",
        "opcoes": ["Berlim", "Madri", "Paris", "Lisboa"],
        "resposta_correta": "Paris"
    },
    {
        "pergunta": "Quem escreveu 'Dom Quixote'?",
        "opcoes": ["Miguel de Cervantes", "Gabriel Garcia Marquez", "William Shakespeare", "Victor Hugo"],
        "resposta_correta": "Miguel de Cervantes"
    },
    {
        "pergunta": "Qual √© o maior planeta do sistema solar?",
        "opcoes": ["Terra", "Marte", "J√∫piter", "Saturno"],
        "resposta_correta": "J√∫piter"
    }
]


# Inicializa√ß√£o do estado
if "initialized" not in st.session_state:
    # Configura√ß√£o inicial de pontua√ß√£o
    st.session_state.pontuacao = 0

    # Embaralha as op√ß√µes para cada pergunta
    for questao in quiz_data:
        random.shuffle(questao["opcoes"])

    # Marca como inicializado
    st.session_state.initialized = True

# Fun√ß√£o para mostrar o placar que pisca em RGB
def show_score(score, is_correct):
    # Se a resposta foi correta, mostramos o placar com anima√ß√£o RGB
    if is_correct:
        st.markdown(f"""
        <div style="font-size: 40px; animation: blinkRGB 2s step-end infinite; font-weight: bold;">Voc√™ acertou! Pontua√ß√£o: {score}</div>
        <style>
            @keyframes blinkRGB {{
                0% {{color: red;}}
                33% {{color: green;}}
                66% {{color: blue;}}
                100% {{color: red;}}
            }}
        </style>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"**Pontua√ß√£o: {score}**", unsafe_allow_html=True)

# Fun√ß√£o principal do app
def main():
    st.title("Quiz com Temporizador")

    # Configura√ß√£o inicial da pontua√ß√£o
    if "pontuacao" not in st.session_state:
        st.session_state.pontuacao = 0

    # Verificar se as alternativas j√° foram embaralhadas
    if "embaralhado" not in st.session_state:
        # Embaralha as op√ß√µes de resposta apenas uma vez no in√≠cio
        for questao in quiz_data:
            random.shuffle(questao["opcoes"])
        st.session_state.embaralhado = True

    # Exibe o placar grande no topo
    show_score(st.session_state.pontuacao, is_correct=False)

    # Loop por cada pergunta
    for idx, questao in enumerate(quiz_data):
        st.subheader(f"Pergunta {idx + 1}")
        st.write(questao["pergunta"])

        # Exibe op√ß√µes e espera resposta
        resposta = st.radio("Escolha uma op√ß√£o:", questao["opcoes"], key=idx)

        # Temporizador de 5 segundos antes de mostrar o feedback
        if st.button("Responder", key=f"responder_{idx}"):
            st.write("Processando resposta...")

            # Inicia o temporizador de 5 segundos
            for seg in range(5, 0, -1):
                st.write(f"Tempo restante para feedback: {seg} segundos")
                time.sleep(1)

            # Feedback visual ap√≥s 5 segundos
            if resposta == questao["resposta_correta"]:
                st.success("Correto! üéâ")
                st.session_state.pontuacao += 1
                show_score(st.session_state.pontuacao, is_correct=True)  # Mostra o placar com anima√ß√£o RGB
            else:
                st.error("Incorreto! ‚ùå")
                show_score(st.session_state.pontuacao, is_correct=False)  # Mostra o placar normal

            st.write("---")

    # Exibir pontua√ß√£o final
    if st.button("Ver Resultado"):
        st.write(f"Voc√™ acertou {st.session_state.pontuacao} de {len(quiz_data)} perguntas!")

if __name__ == "__main__":
    main()
